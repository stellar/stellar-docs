openapi: 3.0.0
info:
  version: "2.0.0"
  description: |
    The Synchronous Callbacks API specification for the Stellar Anchor Platform project.
    
    The Synchronous Callbacks API defines requests made by the Platform while it is processing a request from a client application. The 
    anchor's responses to these requests affect the Platform responses to the client application.
  title: Synchronous Callbacks API
tags:
  - name: "Unique Address"
    description: "(optional) Provide a unique `stellar_address:memo` pair that will be used to correlate a Stellar payment 1-to-1 with a Platform resource such as a [SEP-31](https://stellar.org/protocol/sep-31) transaction."
  - name: "Fees"
    description: "Requests containing data that can be used to calculate transaction fees."
  - name: "Rates"
    description: "Requests containing data that can be used to provide exchange rates between on & off-chain assets."
  - name: "Customers"
    description: |
      [SEP-12](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md) requests made from client 
      applications.
paths:
  /unique_address:
    get:
      description: |
        If the platform is configured with `depositInfoGeneratorType: api`, the Platform will be executing this request to 
        the Anchor backend every time a transaction is initiated by a client application.

        The Anchor must guarantee that the memo returned in this request is unique, so it can be mapped 1-to-1 to a Platform
        resource such as a [SEP-31](https://stellar.org/protocol/sep-31) transaction.
        
        It is possible that these memos are never used by the client who initiated the transaction though.
        
        Here is how this flow would be used for Receiving Anchors that need to create their unique `stellar_address:memo` pairs
        outside the platform, using Circle:
        
        [![](https://mermaid.ink/img/pako:eNqlVctu2zAQ_JUFTy1iOwhyE9AUhuu0ORQ1YvdmIKDJVUSYIlWSihEY_veuRMuPhHaTVCc9VjPD4exyzYSVyDLm8U-NRuA3xR8dL-cG6AoqaMxgOp70r69g5rjxXARlDdxqu4KVCgXM2VpwrRdcLIeTu81lbRQhPXApHXo_ZxGp4i4ooSpuAkwDas1d4gMaqcwjDI0obOL7p3sUqJ6o5DNMNA-5deX5qlNII-WExvj-mLV_c3OR4slg8ms6g7XH6vpqcxn2XvgIYyuCJSPgnB2w4B4lkIGhQKi22CCsydVj7XiDF-GaK6WD9KXlTfkTwoGsf8JcvDYqg-_j2dkFfD1geFDyS5plb2U0mnDRIC0PgcNCW7EUBVcGtqCDPUqs79Ov_ZS8ewy1Mx4MriAKo_z5mKdOYlZiaeeM9lu5wVl9L1n2Zn6Qh5IUb5KWn9y6W2WUL5DSUSvdZrFJx7brDgyPDdd8e4emU1L6x7nfrznNPTjRLNtmzuAnX2LX2sT_XKIJ3U_xbf9Mb3WdIDGgCJ5i8gIKCl5VFCIJte8c-l8Xjvej82GnxdNaGyUHc2_81EjZbcPhRLwzuU2Q7YxKUjkrEIlkh0jyA9i8vc9pxvZaFd2COy-CbR93iDDSam93uhNPGD-cjX7AuptEbcenE1dJal-ZSqUPPNR-8JHk_25RW4KTiG-dz-3oSozny0zJxjFRoFi2VBG-s_l1yN_ZMq_kK9P80Q7zAeuxEulBSTpk1w3-nFF9iXOW0a3EnNc6NMfkhkqjy2OpgnUsy7n22GO8Dnb6bATLgquxK9oe1NuqzV8v2LI1)](https://mermaid.live/edit#pako:eNqlVctu2zAQ_JUFTy1iOwhyE9AUhuu0ORQ1YvdmIKDJVUSYIlWSihEY_veuRMuPhHaTVCc9VjPD4exyzYSVyDLm8U-NRuA3xR8dL-cG6AoqaMxgOp70r69g5rjxXARlDdxqu4KVCgXM2VpwrRdcLIeTu81lbRQhPXApHXo_ZxGp4i4ooSpuAkwDas1d4gMaqcwjDI0obOL7p3sUqJ6o5DNMNA-5deX5qlNII-WExvj-mLV_c3OR4slg8ms6g7XH6vpqcxn2XvgIYyuCJSPgnB2w4B4lkIGhQKi22CCsydVj7XiDF-GaK6WD9KXlTfkTwoGsf8JcvDYqg-_j2dkFfD1geFDyS5plb2U0mnDRIC0PgcNCW7EUBVcGtqCDPUqs79Ov_ZS8ewy1Mx4MriAKo_z5mKdOYlZiaeeM9lu5wVl9L1n2Zn6Qh5IUb5KWn9y6W2WUL5DSUSvdZrFJx7brDgyPDdd8e4emU1L6x7nfrznNPTjRLNtmzuAnX2LX2sT_XKIJ3U_xbf9Mb3WdIDGgCJ5i8gIKCl5VFCIJte8c-l8Xjvej82GnxdNaGyUHc2_81EjZbcPhRLwzuU2Q7YxKUjkrEIlkh0jyA9i8vc9pxvZaFd2COy-CbR93iDDSam93uhNPGD-cjX7AuptEbcenE1dJal-ZSqUPPNR-8JHk_25RW4KTiG-dz-3oSozny0zJxjFRoFi2VBG-s_l1yN_ZMq_kK9P80Q7zAeuxEulBSTpk1w3-nFF9iXOW0a3EnNc6NMfkhkqjy2OpgnUsy7n22GO8Dnb6bATLgquxK9oe1NuqzV8v2LI1)
      tags:
        - Unique Address
      parameters:
        - in: query
          name: transaction_id
          description: |
            The platform server will save the posted transaction and pass the `transaction_id` through this endpoint. 
            If the anchor wishes to return transaction-dependent unique_address, the anchor may query the [`GET /transactions` endpoint of the Platform API](https://github.com/stellar/java-stellar-anchor-sdk/blob/main/docs/03%20-%20Implementing%20the%20Anchor%20Server/Communication/Platform%20API.yml).
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  unique_address:
                    description: An object containing the unique `stellar_address:memo` pair used to identify a destination.
                    type: object
                    properties:
                      stellar_address:
                        description: A `G...` stellar address or a `M...` [muxed stellar address](https://developers.stellar.org/docs/glossary/muxed-accounts/) of an **existing** account in the Stellar network.
                        type: string
                      memo:
                        description: The memo to attach to the Stellar payment.
                        type: string
                      memo_type:
                        description: The type of memo to attach to the Stellar payment (text, hash, or id).
                        type: string
                        enum:
                          - text
                          - hash
                          - id
                    required:
                      - stellar_address

        '500':
          description: Error. The Platform will respond to the client application with the same response code and body.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /fee:
    get:
      description: |
        The Platform will make this request to the anchor every time a transaction is initiated by a client application
        without a `quote_id`.

        The Anchor must ensure that the sending and receiving customers specified in the request meet the KYC requirements
        necessary to partake in the transaction described in the request.

        The anchor must return the fee it will charge for the transaction.

        In the future, this endpoint may be used to provide estimated fees to client applications prior to initiating transactions.
        When this change is made, the request schema will be adapted to support the use case.
      tags:
        - Fees
      parameters:
        - in: query
          name: send_asset
          description: |
            The asset the client application will send to the anchor in exchange for `receive_asset` in 
            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).
          schema:
            type: string
          required: true
        - in: query
          name: receive_asset
          description: |
            The asset the that the anchor will send in exchange for `send_asset` in 
            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).
          schema:
            type: string
          required: true
        - in: query
          name: send_amount
          description: |
            The amount of `send_asset` the client application will send in exchange for `receive_asset`. One of `send_amount` 
            or `receive_amount` will always be included in the request. If the client application specified a `quote_id` in 
            its transaction creation request, both amounts specified in the referenced quote will be passed.
          schema:
            type: string
        - in: query
          name: receive_amount
          description: |
            The amount of `receive_asset` the anchor will send in exchange for `send_asset`. One of `send_amount` or 
            `receive_amount` will always be included in the request. If the client application specified a `quote_id` in its 
            transaction creation request, both amounts specified in the referenced quote will be passed.
          schema:
            type: string
        - in: query
          name: client_id
          description: |
            An identifier for the client application making the request. This ID can be used to offer different fees to different clients.
            A client ID can be one of the following:
            1. the `client_domain`: In SEP-24, if the transaction is initiated from a non-custodial wallet, the `client_id` must match the `client_domain` if wallet attribution is required. 
            2. the Stellar custodial/omnibus account: In SEP-24, if the transaction is initiated from a custodian, such as Wyre, the `client_id` should match a known pooled/omnibus account configured in the [`omnibusAccountList`] of the YAML file](https://github.com/stellar/java-stellar-anchor-sdk/blob/main/platform/src/main/resources/anchor-config-defaults.yaml).  
            3. The Stellar account of a sending anchor: In SEP-31, the `client_id` should match the account of a known SEP-31 sending anchor match the one used to authenticate via SEP-10.
          schema:
            type: string
          required: true
        - in: query
          name: sender_id
          description: |
            The SEP-12 customer ID of the sending user.
          schema:
            type: string
          required: true
        - in: query
          name: receiver_id
          description: |
            The SEP-12 customer ID of the receiving user.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/FeeResponse'
        '422':
          description: |
            Unprocessable Entity. This status should be returned when the anchor understood the request but cannot 
            return a success response. An example for when this response code would be appropriate is if the sender 
            and/or receiver is not permitted to initiate a transaction with the specified amounts. In these cases, 
            the Platform will respond to the client application's request with a `400 Bad Request` and include the 
            error message provided by the anchor in the response body.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '500':
          description: Error. The Platform will respond to the client application with the same response code and body.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /rate:
    get:
      description: |
        Transactions that involve two non-equivalent on & off-chain assets (such as USDC on Stellar and fiat EUR) must 
        use exchange rates that are communicated to the client application requesting the transaction. When clients make
        requests to the Platform for these exchange rates, the Platform sends this request to the anchor to fetch it.
        
        Rates can be [indicative](https://www.investopedia.com/terms/i/indicativequote.asp) or 
        [firm](https://www.investopedia.com/terms/f/firmquote.asp). The anchor must provide an expiration if the client
        requests a firm rate.
        
        Anchors can provide discounted rates specific client applications. The Platform includes the `client_id` parameter 
        for this reason.
        
        Either `sell_amount` or `buy_amount` will be included in requests as parameters, but never both. In the same way,
        either `sell_delivery_method` and `buy_delivery_method` may be included in requests, but never both, since either
        `sell_asset` or `buy_asset` is a Stellar asset.
        
        In the future, we may add headers to the response that informs the Platform on whether or not it can cache the
        response returned, and if so, for how long.
      tags:
        - Rates
      parameters:
        - in: query
          name: type
          description: The type of rate requested. `firm` and `indicative_price` rates need to return a "fee" and "total_price" fields, while `indicative_prices` doesn't.
          schema:
            type: string
            enum:
              - indicative_price
              - indicative_prices
              - firm
          required: true
        - in: query
          name: context
          description: The context it will be used for. It is mandatory for the types `indicative_price` and `firm`.
          schema:
            type: string
            enum:
              - sep6
              - sep31
        - in: query
          name: client_id
          description: |
            An identifier for the client application making the request. This ID can be used to offer different fees to different clients.

            Client IDs will be the Stellar public key the public key used to authenticate via SEP-10. Anchors must ensure
            that the public key specified in the request matches a public key known to belong to the sending anchor.

            This parameter will only be specified if the client is authenticated via SEP-10. Anchors can define whether or not 
            authentication is required for fetching indicative rates. Firm rates always require authentication.
          schema:
            type: string
        - in: query
          name: sell_asset
          description: |
            The asset the client application will send to the anchor in exchange for `buy_asset` in 
            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).
          schema:
            type: string
          required: true
        - in: query
          name: buy_asset
          description: |
            The asset the that the anchor will send in exchange for `sell_asset` in 
            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).
          schema:
            type: string
          required: true
        - in: query
          name: sell_amount
          description: |
            The amount of `sell_asset` the client application will send in exchange for `buy_asset`. Will not be used in
            conjuction with `buy_amount`.
          schema:
            type: string
        - in: query
          name: buy_amount
          description: |
            The amount of `buy_asset` the anchor will send in exchange for `sell_asset`. Will not be used in conjuction
            with `sell_amount`.
          schema:
            type: string
        - in: query
          name: country_code
          description: |
            The [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code of the user's current address.
            Anchors should expect this parameter to be provided if one of the assets of the buy/sell pair is fiat and it 
            is available in two or more countries.
          schema:
            type: string
        - in: query
          name: expire_after
          description: |
            The client's desired `expires_at` date and time for the quote that can be used if this is a firm quote. This should
            be a [UTC ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) string. Anchors should return `400 Bad
            Request` if an expiration date on or after the requested value cannot be provided.
          schema:
            type: string
        - in: query
          name: sell_delivery_method
          description: |
            The method the client or user will use to deliver `sell_asset` to the Anchor. This value may affect the 
            expiration and price provided. The values used for this parameter is defined in the application's configuration.
            Will not be used in conjuction with `buy_delivery_method`.
          schema:
            type: string
        - in: query
          name: buy_delivery_method
          description: |
            The method the client or user wants used to receive `buy_asset` from the Anchor. This value may affect the 
            expiration and price provided. The values used for this parameter is defined in the application's configuration.
            Will not be used in conjuction with `sell_delivery_method`.
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/RateResponse'
        '422':
          description: |
            Unprocessable Entity. This status should be returned when the anchor understood the request but cannot 
            return a success response.
            In these cases, the Platform will respond to the client application's request with a `400 Bad Request` 
            and include the error message provided by the anchor in the response body.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '500':
          description: Error. The Platform will respond to the client application with the same response code and body.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /customer:
    get:
      description: |
        The request and response for this endpoint is identical to the 
        [`GET /customer`](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#customer-get) 
        request and response defined in SEP-12.
        
        This endpoint allows clients to:

          1. Fetch the fields the server requires in order to register a new customer via a SEP-12 `PUT /customer` request
        
        If the server does not have a customer registered for the parameters sent in the request, it should return the 
        fields required in the response. The same response should be returned when no parameters are sent.

          2. Check the status of a customer that may already be registered
        
        This allows clients to check whether the customers information was accepted, rejected, or still needs more info. 
        If the server still needs more info, or the server needs updated information, it should return the fields required.
      tags:
        - Customers
      parameters:
        - in: query
          name: id
          description: The ID of the customer as returned in the response of a previous PUT request.
          schema:
            type: string
        - in: query
          name: account
          description: The Stellar or Muxed Account authenticated with the Platform via SEP-10.
          schema:
            type: string
        - in: query
          name: memo
          description: The memo value identifying a customer with a shared account, where the shared account is `account`.
          schema:
            type: string
        - in: query
          name: memo_type
          description: The type of memo used to identify a customer with a shared account.
          schema:
            type: string
            enum:
              - id
              - hash
              - text
        - in: query
          name: type
          description: |
            The type of action the customer is being KYCd for. See the 
            [Type Specification](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#type-specification)
            documented in SEP-12.
          schema:
            type: string
        - in: query
          name: lang
          description: |
            Defaults to `en`. Language code specified using ISO 639-1. Human readable descriptions, choices, and 
            messages should be in this language.
          schema:
            type: string
      responses:
        '200':
          description: |
            Valid request. Customer either already exists or the customer identified by the parameters is new and must 
            provide the field values described in the repsonse body. Response bodies are identical to the schema defined 
            in SEP-12.
        '400':
          description: Error.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
    put:
      tags:
        - Customers
      description: |
        **The Anchor Platform does not persist any customer KYC data.**
        
        The request and response for this endpoint are identical to the `PUT /customer` request and response defined in SEP-12.
        
        Client applications make requests with the following request body, which is forwarded to the anchor. Anchors 
        must validate and persist the data passed, and return the customer's `id`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas.yml#/components/schemas/PutCustomerRequest'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/PutCustomerResponse'
        '400':
          description: Invalid data.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /customer/callback:
    put:
      tags:
        - Customers
      description: |
        The request for this endpoint is identical to the `PUT /customer/callback` request defined in SEP-12.
        
        Allows the wallet to provide a callback URL to the anchor. The provided callback URL will replace (and supercede)
        any previously-set callback URL for this customer.

        Whenever the customer's `status` changes, the anchor must make a POST request to the callback URL. The payload 
        of the POST request will be the same as the response of SEP-12's `GET /customer`. **The Anchor Platform does not 
        make these callback requests to clients**.
        
        It's the wallet's responsibility to send a working callback URL to the anchor.
        
        Anchors will make POST requests until the customer's status changes to ACCEPTED or REJECTED. If a wallet needs 
        to watch a user's KYC status after that, it will need to set a callback again.
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas.yml#/components/schemas/PutCustomerCallbackRequest'
      responses:
        '204':
          description: "Success"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '404':
          description: Customer not found.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /customer/{id}:
    delete:
      tags:
        - Customers
      description: |
        The request for this endpoint is identical to the `PUT /customer/callback` request defined in SEP-12.
        
        Delete the customer's data or queue the customers data for deletion.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Success.
        '404':
          description: Customer not found.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
