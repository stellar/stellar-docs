openapi: 3.1.0
info:
  title: Anchor Platform
  version: "2.8.2"
  summary: The Anchor Platform is a set of tools and APIs that enable developers and businesses to build their own on and off-ramp services for the Stellar network. It provides a standardized interface, including the implementation of several Stellar Ecosystem Proposals (SEPs), to make it easy for businesses to integrate with Stellar-based wallets and exchanges.
  description: |
    The Anchor Platform is a set of tools and APIs that enable developers and businesses to build their own on and off-ramp services for the Stellar network. It provides a standardized interface, including the implementation of several Stellar Ecosystem Proposals (SEPs), to make it easy for businesses to integrate with Stellar-based wallets and exchanges.

    The platform also includes features for managing assets, transactions, and user accounts, and supports a variety of deployment options, including using Docker or Kubernetes. Overall, the Anchor Platform aims to simplify the process of building and managing a Stellar-based financial service, allowing businesses to focus on providing value to their customers.

    Learn about integrating with the Anchor Platform in the [Admin Guide](https://developers.stellar.org/platforms/anchor-platform/admin-guide) or get API information in the [API Reference](https://developers.stellar.org/platforms/anchor-platform/api-reference).
  termsOfService: https://stellar.org/terms-of-service
  contact:
    name: Stellar Development Foundation
    url: https://stellar.org
    email: hello@stellar.org
  license:
    name: Apache 2.0
    identifier: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://platform-api.yourdomain.com
    description: URL of the Platform API
  - url: https://callbacks.yourdomain.com
    description: URL of the Callbacks Server
  - url: https://custody-server.yourdomain.com
    description: URL of the Custody Server
tags:
  - name: Transactions
    description: Transactions initiated by client applications via SEP APIs
  - name: Unique Address
    description: (optional) Provide a unique `stellar_address:memo` pair that will be used to correlate a Stellar payment 1-to-1 with a Platform resource such as a [SEP-31](https://stellar.org/protocol/sep-31) transaction.
  - name: Fees
    description: Requests containing data that can be used to calculate transaction fees.
  - name: Rates
    description: Requests containing data that can be used to provide exchange rates between on & off-chain assets.
  - name: Customers
    description: "[SEP-12](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md) requests made from client
      applications."
x-tagGroups:
  - name: Resources
    tags:
      - Transactions
  - name: Callbacks
    tags:
      - Unique Address
      - Fees
      - Rates
      - Customers
paths:
  /transactions:
    get:
      tags:
        - Transactions
        - SEP-6
        - SEP-24
        - SEP-31
      summary: Retrieve a List of Transactions
      operationId: getTransactions
      description:
        Allows to query list of transactions for desired SEP. This api supports pagination, and it's possible (and recommended) to make multiple requests to query transactions.
        The last page is reached when the number of elements returned by the endpoint is smaller than provided `page_size`.
      parameters:
        - in: query
          name: sep
          required: true
          schema:
            type: string
            enum: [ "6", "24", "31" ]
          description:
            Lookup transactions belonging to this SEP.
        - in: query
          name: order_by
          schema:
            type: string
            enum: [ created_at, transfer_received_at ]
            default: created_at
          description:
            Specifies field that transactions will be ordered by. Note, that secondary sort is transaction id in ascending value.

            I.e. when timestamps for 2 or more transactions is identical, they will be sorted by id.
        - in: query
          name: order
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
          description:
            Specifies order. Note, that when the field is null, all transactions with null value will be last, regardless of soring order (NULLS LAST).

            For example, transfer time may not be specified for some transactions, resulting into `transfer_received_at` being null. If so, transactions with non-null values will be sorted and returned first, followed by all transactions with null timestamps.
        - in: query
          name: statuses
          schema:
            type: array
            items:
              $ref: './schemas.yml#/components/schemas/StatusSEPAll'
          description: Filters transactions for specified array of statuses. If not provided, filtering is disabled (default behavior)
        - in: query
          name: page_size
          schema:
            type: integer
            default: 20
          description:
            Size of a single search page. Must be positive.
        - in: query
          name: page_number
          schema:
            type: integer
            default: 0
          description:
            Page number to use for continuous search. Page count beings at 0.
      responses:
        '200':
          description: Transaction found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: './schemas.yml#/components/schemas/TransactionListSEP6'
                  - $ref: './schemas.yml#/components/schemas/TransactionListSEP24'
                  - $ref: './schemas.yml#/components/schemas/TransactionListSEP31'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
  /transactions/{id}:
    get:
      tags:
        - Transactions
        - SEP-6
        - SEP-24
        - SEP-31
      summary: Retrieve a Transaction
      operationId: getTransaction
      description:
        Provides the information necessary for the business to determine the state of the transaction identified by
        `id`, decide if any action must be taken to continue processing the transaction, and act on the decision.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Transaction found."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: './schemas.yml#/components/schemas/TransactionSEP6'
                  - $ref: './schemas.yml#/components/schemas/TransactionSEP24'
                  - $ref: './schemas.yml#/components/schemas/TransactionSEP31'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
        '404':
          description: "Transaction not found."
          content:
            application/json:
              schema:
                $ref: './schemas.yml#/components/schemas/Error'
