swagger: '2.0'
info:
  title: Stellar Disbursement Platform API
  version: ''
  description: The Stellar Disbursement Platform (SDP) is a tool built for organizations to make bulk payments to a group of recipients over the Stellar network. You can read more about using the SDP [here](https://developers.stellar.org/docs/category/use-the-stellar-disbursement-platform).
paths:
  /login:
    post:
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              token: >-
                eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoidXNlci1pZCIsImVtYWlsIjoiZW1haWxAZW1haWwuY29tIiwicm9sZXMiOlt7Im5hbWUiOiJTdXBlcnZpc29yIn1dfSwiZXhwIjoxNjc1OTYyOTQ3fQ.4Zj9yBXch-iuFYF-kc_EhHPxjpwp_egMOLbOv4bZKO1MFvcmEgZ5MlXH1_1fZfgUxaNBcMCdRM6MGSqKocwGnA
          schema:
            type: object
            properties:
              token:
                type: string
            example:
              token: >-
                eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoidXNlci1pZCIsImVtYWlsIjoiZW1haWxAZW1haWwuY29tIiwicm9sZXMiOlt7Im5hbWUiOiJTdXBlcnZpc29yIn1dfSwiZXhwIjoxNjc1OTYyOTQ3fQ.4Zj9yBXch-iuFYF-kc_EhHPxjpwp_egMOLbOv4bZKO1MFvcmEgZ5MlXH1_1fZfgUxaNBcMCdRM6MGSqKocwGnA
        '400':
          description: Bad Request
          headers: {}
          examples:
            application/json:
              error: Invalid credentials
              extras:
                status: 400
                message: Invalid username or password
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Invalid credentials
              extras:
                status: 400
                message: Invalid username or password
      summary: Log In
      operationId: Log In
      description: 'Allows credentialed SDP users to log in to the SDP dashboard with a password. Note: all passwords must be at least 8 characters long and a combination of uppercase letters, lowercase letters, numbers, and symbols.'
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              recaptcha_token:
                type: string
                description: "Token for reCAPTCHA validation. ReCAPTCHA token is only required when `ENABLE_RECAPTCHA` configuration is set to true."
            required:
              - email
              - password
            example:
              email: johndoe@mail.com
              password: mysecret
      produces:
        - application/json
  /refresh-token:
    post:
      responses:
        '200':
          description: Returns a new access token
          headers: {}
          examples:
            application/json:
              token: >-
                eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoidXNlci1pZCIsImVtYWlsIjoiZW1haWxAZW1haWwuY29tIiwicm9sZXMiOlt7Im5hbWUiOiJTdXBlcnZpc29yIn1dfSwiZXhwIjoxNjc1OTYyOTQ3fQ.4Zj9yBXch-iuFYF-kc_EhHPxjpwp_egMOLbOv4bZKO1MFvcmEgZ5MlXH1_1fZfgUxaNBcMCdRM6MGSqKocwGnA
          schema:
            type: object
            properties:
              token:
                type: string
            example:
              token: >-
                eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoidXNlci1pZCIsImVtYWlsIjoiZW1haWxAZW1haWwuY29tIiwicm9sZXMiOlt7Im5hbWUiOiJTdXBlcnZpc29yIn1dfSwiZXhwIjoxNjc1OTYyOTQ3fQ.4Zj9yBXch-iuFYF-kc_EhHPxjpwp_egMOLbOv4bZKO1MFvcmEgZ5MlXH1_1fZfgUxaNBcMCdRM6MGSqKocwGnA
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
      summary: Refresh Token
      operationId: Refresh Token
      description: 'A user’s token expires after 15 minutes. This endpoint handles refreshing the user’s token without disrupting their experience. It is triggered within the 30-second window before the token expires.'
      tags:
        - Authentication
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
  /mfa:
    post:
      summary: Provide Multi-Factor Authentication
      description: 'Governs the multi-factor authentication process for SDP user login, including the ability to remember the device so MFA is not always required.'
      operationId: authenticateMFA
      tags:
        - Authentication
      parameters:
        - in: body
          name: body
          description: MFA request data
          required: true
          schema:
            type: object
            properties:
              mfa_code:
                type: string
                description: Multi-factor authentication code
              remember_me:
                type: boolean
                description: Boolean flag to remember the user
              recaptcha_token:
                type: string
                description: "Token for reCAPTCHA validation. ReCAPTCHA token is only required when `ENABLE_RECAPTCHA` configuration is set to true."
            required:
              - mfa_code
        - in: header
          name: Device-ID
          type: string
          required: false
          description: Identifier of the device
      responses:
        '200':
          description: Successful authentication
          schema:
            type: object
            properties:
              token:
                type: string
                description: Authentication token
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
      produces:
        - application/json
  /forgot-password:
    post:
      summary: Forgot Password
      description: 'Sends an email with a token to an SDP user who has gone through the Forgot Password process.'
      operationId: forgotPassword
      tags:
        - Authentication
      parameters:
        - in: body
          name: body
          description: Forgot password request data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: Email of the user
              recaptcha_token:
                type: string
                description: Token for reCAPTCHA validation
            required:
              - email
      responses:
        '200':
          description: Forgot password email sent successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
  /reset-password:
    post:
      summary: Reset Rassword
      description: 'Allows an SDP user who has gone through the Forgot Password process to set their new password with a token sent via email.'
      operationId: resetPassword
      tags:
        - Authentication
      parameters:
        - in: body
          name: body
          description: Reset password request data
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: New password for the user
              reset_token:
                type: string
                description: Token used to identify a valid password reset request
            required:
              - password
              - reset_token
      responses:
        '200':
          description: Password reset successfully
        '400':
          $ref: '#/responses/BadRequestResponse'
      produces:
        - application/json
  /disbursements:
    get:
      responses:
        '200':
          description: "A list of Disbursement details"
          schema:
            $ref: '#/definitions/DisbursementPagination'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: List All Disbursements
      operationId: List All Disbursements
      description: 'Fetches all disbursements the organization has created. This endpoint supports pagination. The response includes basic aggregations on payments within the disbursement.'
      tags:
        - Disbursements
      parameters:
        - name: page
          in: query
          description: The page requested.
          required: false
          type: number
          default: 1
        - name: page_limit
          in: query
          description: Define how many results will be returned in the response.
          required: false
          type: number
          default: 20
        - name: q
          in: query
          description: A search term used to query through the disbursement names.
          required: false
          type: string
        - name: status
          in: query
          description: Exact match on the status of the disbursement.
          required: false
          x-example: DRAFT
          type: string
          enum:
            - DRAFT
            - READY
            - STARTED
            - PAUSED
            - COMPLETED
        - name: created_at_after
          in: query
          description: >-
            Only return disbursements that are created after this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: created_at_before
          in: query
          description: >-
            Only return disbursements that are created before this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: sort
          in: query
          description: Field used to sort disbursements
          required: false
          type: string
          default: created_at
          enum:
            - name
            - created_at
        - name: direction
          in: query
          description: Direction for sorting disbursements.
          required: false
          type: string
          default: asc
          enum:
            - asc
            - desc
      produces:
        - application/json
      security:
        - BearerAuth: []
    post:
      responses:
        '201':
          description: "A new disbursement"
          schema:
            $ref: '#/definitions/Disbursement'
        '400':
          description: Bad Request
          headers: {}
          examples:
            application/json:
              error: Bad request
              extras:
                status: 400
                message: Invalid country code provided
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Bad request
              extras:
                status: 400
                message: Invalid country code provided
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Create Disbursement
      operationId: Create Disbursement
      description: 'Creates a new disbursement in ```draft``` state with basic details. Important: a disbursement is not triggered until the organization adds receivers through the Upload Disbursement Instructions endpoint and the status changes from ```draft``` to ```ready```.'
      tags:
        - Disbursements
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
              wallet_id:
                type: string
              asset_id:
                type: string
              country_code:
                type: string
                description: 'Three-character ISO 3166 code'
            example:
              name: My New Disbursement name
              wallet_id: e2de8544-b7e2-40a9-ad40-411f70d5c4bf
              asset_id: d227a68c-2f40-11ee-be56-0242ac120002
              country_code: UKR
      produces:
        - application/json
      security:
        - BearerAuth: []
  /disbursements/{id}:
    get:
      responses:
        '200':
          description: "Disbursement details"
          schema:
            $ref: '#/definitions/Disbursement'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
      summary: Retrieve a Disbursement
      operationId: Retrieve a Disbursement
      description: 'Fetches information on a specific disbursement by ```id```.'
      tags:
        - Disbursements
      parameters:
        - name: id
          in: path
          description: ID of the `Disbursement`.
          required: true
          type: string
      produces:
        - application/json
      security:
        - BearerAuth: []
  /disbursements/{id}/receivers:
    get:
      responses:
        '200':
          description: "A list of Disbursement Receivers"
          schema:
            $ref: '#/definitions/DisbursementReceiverPagination'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
      summary: List All Disbursement Receivers
      operationId: List All Disbursement Receivers
      description: 'Fetches a list of receivers within a specific disbursement using the disbursement ```id```. This endpoint supports pagination.'
      tags:
        - Disbursements
      parameters:
        - name: id
          in: path
          description: ID of the Disbursement
          required: true
          type: string
        - name: page
          in: query
          description: The page number to fetch.
          required: false
          type: number
        - name: page_limit
          in: query
          description: The number of records to return per page.
          required: false
          type: number
      produces:
        - application/json
      security:
        - BearerAuth: []
  /disbursements/{id}/instructions:
    post:
      responses:
        '201':
          description: Created
          headers: {}
          examples:
            application/json:
              message: File uploaded succesfully
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: File uploaded succesfully
        '400':
          description: Bad Request
          headers: {}
          examples:
            application/json:
              error: Invalid file format *.xyz
              extras:
                foo: bar
                message: Not authorized
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  foo:
                    type: string
                  message:
                    type: string
            example:
              error: Invalid file format *.xyz
              extras:
                foo: bar
                message: Not authorized
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
      summary: Upload Disbursement Instructions
      operationId: Upload Disbursement Instructions
      description: 'Adds a file containing a list of receivers to a ```draft``` disbursement. This step is required before a disbursement can begin. The file must be a CSV and has a standard format that can be found at ```dev/sample/sample-disbursement.csv```. The operation is idempotent, guaranteed by deleting and recreating the disbursement attributes when this endpoint is called.'
      consumes:
        - multipart/form-data
      tags:
        - Disbursements
      parameters:
        - name: id
          in: path
          description: ID of the Disbursement
          required: true
          type: string
        - name: "file"
          in: "formData"
          description: "Disbursement instructions file to upload. The CSV file should be in the following format: `phone,id,amount,verification`"
          required: true
          type: "file"
      produces:
        - application/json
      security:
        - BearerAuth: []
    get:
      responses:
        '200':
          description: "Disbursement CSV file"
          headers:
            Content-Disposition:
              type: string
              description: "The filename of the returned CSV file."
            Content-Type:
              type: string
              description: "text/csv"
          examples:
            text/csv: ''
        '400':
          description: Bad Request
          headers: {}
          examples:
            application/json:
              error: Invalid request
              extras:
                foo: bar
                message: Invalid request parameters
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  foo:
                    type: string
                  message:
                    type: string
            example:
              error: Invalid request
              extras:
                foo: bar
                message: Invalid request parameters
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
      summary: Download Disbursement Instructions
      operationId: Download Disbursement Instructions
      description: 'Allows an SDP user to download the raw CSV file that was uploaded when creating the disbursement. This will only return results after instructions have been attached to a draft disbursement.'
      tags:
        - Disbursements
      parameters:
        - name: id
          in: path
          description: ID of the Disbursement
          required: true
          type: string
      produces:
        - text/csv
      security:
        - BearerAuth: []
  /disbursements/{id}/status:
    patch:
      responses:
        '200':
          description: "Message Response"
          schema:
            $ref: '#/definitions/MessageResponse'
          examples:
            application/json:
              message: Disbursement started
        '400':
          description: Bad Request
          headers: {}
          examples:
            application/json:
              error: Bad request
              extras:
                status: 400
                message: Disbursement is not ready to be started
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Bad request
              extras:
                status: 400
                message: Disbursement is not ready to be started
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Disbursement not found
      summary: Update a Disbursement Status
      operationId: Update a Disbursement Status
      description: 'Updates the status of a disbursement according to the state machine. The disbursement must move from ```draft``` to ```ready``` in order to start the disbursement and trigger payments. Payments will start as soon as this endpoint is hit. A disbursement can also be moved into ```paused``` state by an SDP user to prevent further payments from going out and restarted when they are ready.'
      tags:
        - Disbursements
      parameters:
        - name: id
          in: path
          description: ID of the disbursement
          required: true
          type: string
      produces:
        - application/json
      security:
        - BearerAuth: []
  /payments:
    get:
      responses:
        '200':
          description: "A paginated list of payments"
          schema:
            $ref: '#/definitions/PaymentPagination'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: List All Payments
      operationId: List All Payments
      description: 'Returns all individual payments matching the request criteria. This endpoint supports pagination and filtering on payment status, receiver ID, and timestamp. Each payment has details on the transaction itself, receiver, disbursement, asset, status history, and blockchain information.'
      tags:
        - Payments
      parameters:
        - name: page
          in: query
          description: The page requested.
          required: false
          type: number
          default: 1
        - name: page_limit
          in: query
          description: Define how many results will be returned in the response.
          required: false
          type: number
          default: 20
        - name: status
          in: query
          description: Exact match on the status of the payment.
          required: false
          x-example: DRAFT
          type: string
          enum:
            - DRAFT
            - READY
            - PENDING
            - PAUSED
            - SUCCESS
            - FAILED
        - name: receiver_id
          in: query
          description: UUID that represents a receiver in the database
          required: false
          x-example: b6b667ad-6cc2-46cf-9be7-561daace7d48
          type: string
        - name: created_at_after
          in: query
          description: >-
            Only return payments that are created after this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: created_at_before
          in: query
          description: >-
            Only return payments that are created before this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: sort
          in: query
          description: Field used to sort payments
          required: false
          type: string
          default: created_at
          enum:
            - created_at
        - name: direction
          in: query
          description: Direction for sorting payments.
          required: false
          type: string
          default: asc
          enum:
            - asc
            - desc
      produces:
        - application/json
      security:
        - BearerAuth: []
  /payments/{id}:
    get:
      responses:
        '200':
          description: "Payment details"
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          description: Not Found
          headers: {}
          examples:
            application/json:
              error: Not found
              extras:
                status: 404
                message: Payment not found
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  status:
                    type: number
                  message:
                    type: string
            example:
              error: Not found
              extras:
                status: 404
                message: Payment not found
      summary: Retrieve a Payment
      operationId: Retrieve a Payment
      description: 'Fetches detailed information on a specific payment by ```id```.'
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: ID of the `Payment`.
          required: true
          type: string
      produces:
        - application/json
      security:
        - BearerAuth: []
  /receivers:
    get:
      responses:
        '200':
          description: "A paginated list of Receiver details"
          schema:
            $ref: '#/definitions/ReceiverPagination'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: List All Receivers
      operationId: List All Receivers
      description: 'Returns all receivers matching the request criteria. This endpoint supports pagination and filtering on receiver status, receiver attributes, and timestamp. Each payment has details on the receiver, high-level payments metrics, and wallets associated with the receiver.'
      tags:
        - Receivers
      parameters:
        - name: page
          in: query
          description: The page requested.
          required: false
          type: number
          default: 1
        - name: page_limit
          in: query
          description: Define how many results will be returned in the response.
          required: false
          type: number
          default: 20
        - name: q
          in: query
          description: >-
            A search term used to query through the receiver phone_number,
            email, and ID.
          required: false
          type: string
        - name: status
          in: query
          description: Exact match on the status of the receiver wallet.
          required: false
          x-example: DRAFT
          type: string
          enum:
            - DRAFT
            - READY
            - REGISTERED
            - FLAGGED
        - name: created_at_after
          in: query
          description: >-
            Only return receivers that are created after this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: created_at_before
          in: query
          description: >-
            Only return receivers that are created before this date. Format:
            YYYY-MM-DD
          required: false
          x-example: '2006-01-02'
          type: string
        - name: sort
          in: query
          description: Field used to sort receivers
          required: false
          type: string
          default: created_at
          enum:
            - created_at
        - name: direction
          in: query
          description: Direction for sorting receivers.
          required: false
          type: string
          default: asc
          enum:
            - asc
            - desc
      produces:
        - application/json
      security:
        - BearerAuth: []
  /receivers/{id}:
    get:
      responses:
        '200':
          description: "Receiver Details"
          schema:
            $ref: '#/definitions/Receiver'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'

      summary: Retrieve a Receiver
      operationId: Retrieve a Receiver
      description: 'Fetches detailed information on a specific receiver by ```id```, including all associated wallets.'
      tags:
        - Receivers
      parameters:
        - name: id
          in: path
          description: ID of the `Receiver`.
          required: true
          type: string
      produces:
        - application/json
      security:
        - BearerAuth: []
    patch:
      responses:
        '200':
          description: "Updated Receiver Details"
          schema:
            $ref: '#/definitions/Receiver'
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
      summary: Update a Receiver
      operationId: Update a Receiver
      description: 'This endpoint allows an organization to add and update information on the receiver, including email address, external ID, date of birth, personal PIN, and national ID number. The response includes all information on the receiver.'
      tags:
        - Receivers
      parameters:
        - name: id
          in: path
          description: ID of the `Receiver`.
          required: true
          type: string
        - name: body
          in: body
          description: List of fields to patch for the receiver
          required: true
          schema:
            $ref: '#/definitions/PatchReceiverRequest'
      produces:
        - application/json
      security:
        - BearerAuth: []
  /statistics:
    get:
      responses:
        '200':
          description: 'General Statistics response'
          schema:
            $ref: '#/definitions/GeneralStatistics'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
      summary: Retrieve All Statistics
      operationId: Retrieve All Statistics
      description: 'Fetches all metrics on all disbursements the organization has created. The response includes basic aggregations on payments, receivers, receiver wallets, and assets.'
      tags:
        - Statistics
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
  /statistics/disbursements/{id}:
    get:
      responses:
        '200':
          description: 'Returns statistics for disbursement'
          schema:
            $ref: '#/definitions/DisbursementsStatistics'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Retrieve Disbursement Statistics
      operationId: Retrieve Disbursement Statistics
      description: 'Fetches metrics on a specific disbursement by ```id```.'
      tags:
        - Statistics
      parameters:
        - name: id
          in: path
          description: ID of the `Disbursement`.
          required: true
          type: string
      produces:
        - application/json
      security:
        - BearerAuth: []
  /wallet-registration/start:
    get:
      summary: Start Wallet Registration
      operationId: Start Wallet Registration
      description: >-
        This is the endpoint the browser reaches with the first token so that the receiver can confirm their verification information through a webflow. Requires a valid SEP-24 token in the request.
      tags:
        - Registration
      produces:
        - text/html
      parameters:
        - name: token
          in: query
          description: The SEP-24 token used for authentication
          required: true
          type: string
        - name: transaction_id
          in: query
          description: The transaction id associated with the SEP-24 token
          required: true
          type: string
      responses:
        '200':
          description: Token is valid and the webpage will be loaded normally.
          schema:
            type: string
            description: HTML page content
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
  /wallet-registration/otp:
    post:
      summary: Send One-Time Passcode
      operationId: Send One-Time Passcode
      description: >-
        This endpoint generates a 6-digit OTP and sends it via SMS to the phone number provided in the request body (after checking that the phone number matches a receiver phone number in the SDP). A valid SEP-24 token should be included in the Authorization header of the request.
      tags:
        - Registration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Object containing phone number
          required: true
          schema:
            type: object
            properties:
              phone_number:
                type: string
                description: Phone number to which the OTP will be sent
              recaptcha_token:
                type: string
                description: "Token for reCAPTCHA validation"
            required:
              - phone_number
              - recaptcha_token
        - name: Authorization
          in: header
          description: "SEP-24 token for authorization (Format: 'Bearer {token}')"
          required: true
          type: string
      responses:
        '200':
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '429':
          description: >-
            An OTP was sent to the given user recently and hasn't expired yet.
            Only after expired it will be sent to the user again.
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  code:
                    type: string
                  details:
                    type: string
  /wallet-registration/verification:
    post:
      summary: Verify Receiver Registration
      operationId: Verify Receiver Registration
      description: >-
        This endpoint verifies the receiver's registration by validating the OTP and other verification values provided in the request body. A valid SEP-24 token should be included in the Authorization header of the request.
      tags:
        - Registration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Verification data including phone number, OTP, verification value, and reCAPTCHA token
          required: true
          schema:
            $ref: '#/definitions/ReceiverRegistrationRequest'
        - name: Authorization
          in: header
          description: "SEP-24 token for authorization (Format: 'Bearer {token}')"
          required: true
          type: string
      responses:
        '200':
          description: Verification successful
          schema:
            type: object
            properties:
              message:
                type: string
                example: "ok"
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
  /.well-known/stellar.toml:
    get:
      responses:
        '200':
          description: Token is valid and the webpage will be loaded normally.
          headers: {}
          examples:
            text/toml: >
              ACCOUNTS=["GBC2HVWFIFN7WJHFORVBCDKJORXXXXXXXXXXXXXXXXXXXXXXXX", "GDA34JZ26FZY64XCSY46CUNSHLX762LHJXQXXXXXXXXXXXXXXXXXXXXXXXX"]
              SIGNING_KEY="GDA34JZ26FZY64XCSY46XXXXXXXXXXXXXXXXXXXXXXXX"
              NETWORK_PASSPHRASE="Test SDF Network ; September 2015"
              HORIZON_URL="https://horizon-testnet.stellar.org"
              WEB_AUTH_ENDPOINT="https://ap-stellar-disbursement-platform-backend-dev.stellar.org/auth"
              TRANSFER_SERVER_SEP0024="https://ap-stellar-disbursement-platform-backend-dev.stellar.org/sep24"
              
              [[DOCUMENTATION]]
              ORG_NAME="Stellar Aid"
              
              [[CURRENCIES]]
              code = "EUROC"
              issuer = "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5"
              is_asset_anchored = true
              anchor_asset_type = "fiat"
              status = "live"
              desc = "EUROC"
              
              [[CURRENCIES]]
              code = "USDC"
              issuer = "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5"
              is_asset_anchored = true
              anchor_asset_type = "fiat"
              status = "live"
              desc = "USDC"
      summary: Retrieve Stellar Info File
      operationId: Retrieve Stellar Info File
      description: >-
        Allows the wallet to fetch the SEP-10 server url, SEP-10 signing public key and SEP-24 server url.
      tags:
        - Registration
      parameters: []
      produces:
        - text/toml
  /WEB_AUTH_ENDPOINT:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              transaction: >-
                AAAAAgAAAADIiRu2BrqqeOcP28PWCkD4D5Rjjsqh71HwvqFX+F4VXAAAAGQAAAAAAAAAAAAAAAEAAAAAXzrUcQAAAABfOtf1AAAAAAAAAAEAAAABAAAAAEEB8rhqNa70RYjaNnF1ARE2CbL50iR9HPXST/fImJN1AAAACgAAADB0aGlzaXNhdGVzdC5zYW5kYm94LmFuY2hvci5hbmNob3Jkb21haW4uY29tIGF1dGgAAAABAAAAQGdGOFlIQm1zaGpEWEY0L0VJUFZucGVlRkxVTDY2V0tKMVBPYXZuUVVBNjBoL09XaC91M2Vvdk54WFJtSTAvQ2UAAAAAAAAAAfheFVwAAABAheKE1HjGnUCNwPbX8mz7CqotShKbA+xM2Hbjl6X0TBpEprVOUVjA6lqMJ1j62vrxn1mF3eJzsLa9s9hRofG3Ag==
              network_passphrase: Test SDF Network ; September 2015
          schema:
            type: object
            properties:
              transaction:
                type: string
              network_passphrase:
                type: string
            example:
              transaction: >-
                AAAAAgAAAADIiRu2BrqqeOcP28PWCkD4D5Rjjsqh71HwvqFX+F4VXAAAAGQAAAAAAAAAAAAAAAEAAAAAXzrUcQAAAABfOtf1AAAAAAAAAAEAAAABAAAAAEEB8rhqNa70RYjaNnF1ARE2CbL50iR9HPXST/fImJN1AAAACgAAADB0aGlzaXNhdGVzdC5zYW5kYm94LmFuY2hvci5hbmNob3Jkb21haW4uY29tIGF1dGgAAAABAAAAQGdGOFlIQm1zaGpEWEY0L0VJUFZucGVlRkxVTDY2V0tKMVBPYXZuUVVBNjBoL09XaC91M2Vvdk54WFJtSTAvQ2UAAAAAAAAAAfheFVwAAABAheKE1HjGnUCNwPbX8mz7CqotShKbA+xM2Hbjl6X0TBpEprVOUVjA6lqMJ1j62vrxn1mF3eJzsLa9s9hRofG3Ag==
              network_passphrase: Test SDF Network ; September 2015
        '400':
          description: If some information was missing or invalid.
          headers: {}
          examples:
            application/json:
              error: Bad request.
              extras:
                account: account cannot be empty
          schema:
            type: object
            properties:
              error:
                type: string
              extras:
                type: object
                properties:
                  account:
                    type: string
            example:
              error: Bad request.
              extras:
                account: account cannot be empty
      summary: Request Challenge Transaction
      operationId: Request Challenge Transaction
      description: >-
        Allows the wallet to get the SEP-10 challenge transaction to be signed. More information     [here](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#challenge). The endpoint url can change but is provided in the Get Stellar toml endpoint response under the ```WEB_AUTH_ENDPOINT``` variable.
      tags:
        - Registration
      parameters:
        - name: account
          in: query
          description: >-
            The Client Account, which can be a stellar account (G...) or muxed
            account (M...) that the Client wishes to authenticate with the
            Server..
          required: true
          type: string
        - name: memo
          in: query
          description: >-
            The memo to attach to the challenge transaction. Only permitted if a
            Stellar account (G...) is used. The memo must be of type id. Other
            memo types are not supported.
          required: false
          type: string
        - name: client_domain
          in: query
          description: a Client Domain. Need to be supplied by all Clients/Wallets.
          required: true
          type: string
      produces:
        - application/json
    post:
      responses:
        '200':
          description: SEP-10 handshake was successful.
          headers: {}
          examples:
            application/json:
              token: >-
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJHQTZVSVhYUEVXWUZJTE5VSVdBQzM3WTRRUEVaTVFWREpIREtWV0ZaSjJLQ1dVQklVNUlYWk5EQSIsImp0aSI6IjE0NGQzNjdiY2IwZTcyY2FiZmRiZGU2MGVhZTBhZDczM2NjNjVkMmE2NTg3MDgzZGFiM2Q2MTZmODg1MTkwMjQiLCJpc3MiOiJodHRwczovL2ZsYXBweS1iaXJkLWRhcHAuZmlyZWJhc2VhcHAuY29tLyIsImlhdCI6MTUzNDI1Nzk5NCwiZXhwIjoxNTM0MzQ0Mzk0fQ.8nbB83Z6vGBgC1X9r3N6oQCFTBzDiITAfCJasRft0z0
          schema:
            type: object
            properties:
              token:
                type: string
            example:
              token: >-
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJHQTZVSVhYUEVXWUZJTE5VSVdBQzM3WTRRUEVaTVFWREpIREtWV0ZaSjJLQ1dVQklVNUlYWk5EQSIsImp0aSI6IjE0NGQzNjdiY2IwZTcyY2FiZmRiZGU2MGVhZTBhZDczM2NjNjVkMmE2NTg3MDgzZGFiM2Q2MTZmODg1MTkwMjQiLCJpc3MiOiJodHRwczovL2ZsYXBweS1iaXJkLWRhcHAuZmlyZWJhc2VhcHAuY29tLyIsImlhdCI6MTUzNDI1Nzk5NCwiZXhwIjoxNTM0MzQ0Mzk0fQ.8nbB83Z6vGBgC1X9r3N6oQCFTBzDiITAfCJasRft0z0
        '401':
          description: Unauthorized
          headers: {}
          examples:
            application/json:
              error: The provided transaction is not valid
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: The provided transaction is not valid
      summary: Provide Signed Challenge Transaction
      operationId: Provide Signed Challenge Transaction
      description: >-
        Allows the wallet to post the signed SEP-10 challenge transaction. More information     [here](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#challenge). The endpoint url can change but is provided in the toml file under the ```WEB_AUTH_ENDPOINT``` variable.
      tags:
        - Registration
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              transaction:
                type: string
            example:
              transaction: >-
                AAAAAgAAAADIiRu2BrqqeOcP28PWCkD4D5Rjjsqh71HwvqFX+F4VXAAAAGQAAAAAAAAAAAAAAAEAAAAAXzrUcQAAAABfOtf1AAAAAAAAAAEAAAABAAAAAEEB8rhqNa70RYjaNnF1ARE2CbL50iR9HPXST/fImJN1AAAACgAAADB0aGlzaXNhdGVzdC5zYW5kYm94LmFuY2hvci5hbmNob3Jkb21haW4uY29tIGF1dGgAAAABAAAAQGdGOFlIQm1zaGpEWEY0L0VJUFZucGVlRkxVTDY2V0tKMVBPYXZuUVVBNjBoL09XaC91M2Vvdk54WFJtSTAvQ2UAAAAAAAAAAvheFVwAAABAheKE1HjGnUCNwPbX8mz7CqotShKbA+xM2Hbjl6X0TBpEprVOUVjA6lqMJ1j62vrxn1mF3eJzsLa9s9hRofG3AsiYk3UAAABArIrkvqmA0V9lIZcVyCUdja6CiwkPwsV8BfI4CZOyR1Oq7ysvNJWwY0G42dpxN9OP1qz4dum8apG2hqvxVWjkDQ==
      produces:
        - application/json
  /TRANSFER_SERVER_SEP0024/transactions/deposit/interactive:
    post:
      summary: Request Registration URL
      description: >
        The deposit endpoint allows a wallet to get deposit information from an anchor, 
        so a user has all the information needed to initiate a deposit. 

        It also lets the anchor specify additional information that the user must submit interactively via a popup or embedded browser window to be able to deposit. 
        Please check the detailed documentation [here](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0024.md#deposit-2).
      externalDocs:
        description: Find more info here
        url: https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0024.md#deposit-2
      parameters: []
      tags:
        - Registration
      responses:
        '200':
          description: An anchor requires the user to fill out information on a webpage hosted by the anchor.
          schema:
            type: object
            properties:
              type:
                type: string
                description: Always set to interactive_customer_info_needed.
                example: "interactive_customer_info_needed"
              url:
                type: string
                description: URL hosted by the anchor. The wallet should show this URL to the user as a popup.
                example: "https://api.example.com/kycflow?account=GACW7NONV43MZIFHCOKCQJAKSJSISSICFVUJ2C6EZIW5773OU3HD64VI"
              id:
                type: string
                description: The anchor's internal ID for this deposit / withdrawal request. The wallet will use this ID to query the /transaction endpoint to check status of the request.
                example: "82fhs729f63dh0v4"

  /profile:
    get:
      responses:
        '200':
          description: 'Returns user profile'
          schema:
            $ref: '#/definitions/Profile'

      summary: Get Profile
      operationId: Get Profile
      description: 'Fetches the individual information of the logged in user to populate the Profile page.'
      tags:
        - Profile
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
    patch:
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              message: user profile updated successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Update User Profile
      operationId: Update User Profile
      description: >-
        Updates the profile details of the logged in user, including changing password for authenticated/logged in users. Note: all fields are optional but at least one should be sent in the request.
      tags:
        - Profile
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              password:
                type: string
            example:
              first_name: FirstName
              last_name: LastName
              email: email@email.com
              password: mysecret
      produces:
        - application/json
      security:
        - BearerAuth: []
  /organization:
    get:
      responses:
        '200':
          description: 'Returns organization details'
          schema:
            $ref: '#/definitions/Organization'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
      summary: Get Organization Info
      operationId: Get Organization Info
      description: 'This endpoint returns the organization''s info. It is used in many places across the UI. It returns the name in the navbar and the public key of the organization’s distribution account.'
      tags:
        - Organization
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
    patch:
      responses:
        '200':
          description: OK
          examples:
            application/json:
              message: organization profile updated successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Update Organization Profile
      operationId: Update Organization Profile
      description: 'Updates the organization profile details. Only account owners have permission to do this. Note: both fields are optional but at least one should be sent in the request. It is not necessary to set the header Content-Type for this request. It is set automatically by the HTTP client.'
      tags:
        - Organization
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: logo
          type: file
          description: 'The logo of the organization, file type must be png or jpeg.'
        - in: formData
          name: data
          type: string
          format: json
          description: >
            A JSON string that contains the details to update. Contains the following keys: 
            `organization_name` (string): the new name of the organization,
            `timezone_utc_offset` (string): the new timezone offset of the organization,
            `is_approval_required` (boolean): whether the approval workflow is enabled or not.
            For example: '{"organization_name": "NewOrgName", "timezone_utc_offset": "+02:00", "is_approval_required": true}'
      security:
        - BearerAuth: []
  /organization/logo:
    get:
      summary: Retrieve Organization Logo
      description: 'Retrieves the logo of the organization for display in the UI navbar.'
      operationId: GetOrganizationLogo
      tags:
        - Organization
      produces:
        - 'application/octet-stream'
      responses:
        '200':
          description: OK
          schema:
            type: string
            format: binary
  /countries:
    get:
      summary: Get All Countries
      description: 'Fetches the list of available countries to populate the dropdown box in the New Disbursement flow. The default list reflects geographic coverage of SDP-compatible wallet providers.'
      tags:
        - Organization
      responses:
        '200':
          description: A list of countries
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      produces:
        - application/json
      security:
        - BearerAuth: []
  /assets:
    get:
      summary: Get All Assets
      description: 'Fetches the list of available assets to populate the dropdown box in the New Disbursement flow. Note: the organization must hold a balance in a particular asset to use it in a disbursement.'
      tags:
        - Organization
      responses:
        '200':
          description: A list of assets
          schema:
            type: array
            items:
              $ref: '#/definitions/Asset'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      produces:
        - application/json
      security:
        - BearerAuth: []
    post:
      summary: Create Asset
      description: 'This endpoint is used to create a new asset that can be used in a Disbursement. Note: the organization must hold a balance in a particular asset to use it in a disbursement.'
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Organization
      parameters:
        - in: body
          name: body
          description: Asset to be created
          required: true
          schema:
            type: object
            properties:
              code:
                type: string
                description: The asset code
                example: 'USDC'
              issuer:
                type: string
                description: The issuer
                example: 'GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5'
            required:
              - code
              - issuer
      responses:
        '201':
          description: Asset created successfully
        '400':
          description: Bad request, invalid request body or the provided code/issuer is invalid.
      security:
        - BearerAuth: []
  /assets/{id}:
    delete:
      summary: Delete Asset
      description: This endpoint is used to soft delete an asset.
      produces:
        - application/json
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          description: ID of the asset to delete
          required: true
          type: string
      responses:
        '200':
          description: Asset deleted successfully
        '204':
          description: Asset already deleted
        '404':
          description: Asset not found
      security:
        - BearerAuth: []
  /wallets:
    get:
      summary: Get All Wallets
      description: 'Fetches the list of available wallet providers to populate the dropdown box in the New Disbursement flow. The organization should coordinate with the wallet provider before selecting a particular wallet provider for a disbursement. The initial list reflects all SDP-compatible wallets.'
      tags:
        - Organization
      responses:
        '200':
          description: A list of wallets
          schema:
            type: array
            items:
              $ref: '#/definitions/Wallet'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      produces:
        - application/json
      security:
        - BearerAuth: []
  /users:
    get:
      responses:
        '200':
          description: "Returns a paginated list of User Details"
          schema:
            $ref: '#/definitions/Users'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Get All Users
      operationId: Get All Users
      description: 'Fetches all SDP users within the organization, whether they are active yet or not.'
      tags:
        - Users
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
    post:
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Create User
      operationId: Create User
      description: 'This endpoint creates a new SDP user as the result of an SDP owner adding their information in the UI. It also handles sending the invite email.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              roles:
                type: array
                items:
                  type: string
              email:
                type: string
            example:
              first_name: John
              last_name: Doe
              roles:
                - business
              email: email@email.com
      produces:
        - application/json
      security:
        - BearerAuth: []
  /users/activation:
    patch:
      responses:
        '200':
          description: Created
          examples:
            application/json:
              message: user activation was updated successfully
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Update User Activation Status
      operationId: Update User Activation Status
      description: 'Updates the SDP user’s activation status. This endpoint is primarily used to move a user into active status when they accept the invite to join an SDP organization account and create a password.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: string
              is_active:
                type: boolean
            example:
              user_id: 5ca230c9-da95-4bd1-b2a2-aa5d0df65efd
              is_active: false
      produces:
        - application/json
      security:
        - BearerAuth: []
  /users/roles:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              roles:
                - developer
                - financial_controller
                - business
                - owner
          schema:
            type: object
            properties:
              roles:
                type: array
                items:
                  type: string
            example:
              roles:
                - developer
                - financial_controller
                - business
                - owner
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Get All Roles
      operationId: Get All Roles
      description: 'Fetches available SDP roles, such as owner, financial controller, business user, and developer.'
      tags:
        - Users
      parameters: []
      produces:
        - application/json
      security:
        - BearerAuth: []
    patch:
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              message: user roles were updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: user roles were updated successfully
        '401':
          $ref: '#/responses/UnauthorizedResponse'
        '403':
          $ref: '#/responses/ForbiddenResponse'
      summary: Update User Role
      operationId: Update User Role
      description: 'Updates an SDP user’s role by ```user_ID```.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: string
              roles:
                type: array
                items:
                  type: string
            example:
              user_id: 5ca230c9-da95-4bd1-b2a2-aa5d0df65efd
              roles:
                - developer
      produces:
        - application/json
      security:
        - BearerAuth: []
definitions:
  Amount:
    type: "object"
    properties:
      asset_code:
        type: "string"
        example: 'USDC'
      asset_issuer:
        type: "string"
        example: 'GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5'
      received_amount:
        type: "string"
        example: '100.00'
  Asset:
    type: object
    properties:
      id:
        type: string
        example: 'ffaec4b3-46b0-4db4-a4c4-6c3508057705'
      code:
        type: string
        description: 'Asset code'
        example: 'USDC'
      issuer:
        type: string
        description: 'Asset issuer address'
        example: 'GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5'
      created_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      deleted_at:
        type: string
        format: date-time
        example: '2023-06-03T10:55:51.000Z'
  Country:
    type: object
    properties:
      code:
        type: string
        description: 'Three-character ISO 3166 code'
        example: 'UKR'
      name:
        type: string
        description: 'Country name'
        example: 'Ukraine'
      created_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
  Disbursement:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier of the disbursement
        example: '619da857-8725-4c58-933d-c120a458e0f5'
      name:
        type: string
        description: The name of the disbursement
        example: 'Disbursement Name'
      country:
        $ref: '#/definitions/Country'
      wallet:
        $ref: '#/definitions/Wallet'
      asset:
        $ref: '#/definitions/Asset'
      status:
        description: The status of the disbursement
        $ref: '#/definitions/DisbursementStatus'
        example: 'READY'
      verification_field:
        $ref: '#/definitions/VerificationField'
        example: 'DATE_OF_BIRTH'
      status_history:
        $ref: '#/definitions/DisbursementStatusHistory'
      file_name:
        type: string
        example:  'disbursement-feb-03-2023.csv'
      created_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      total_payments:
        type: integer
        description: Total number of payments
        example: 10
      total_payments_sent:
        type: integer
        description: Total number of successful payments
        example: 8
      total_payments_failed:
        type: integer
        description: Total number of failed payments
        example: 1
      total_payments_remaining:
        type: integer
        description: Total number of remaining payments
        example: 1
      amount_disbursed:
        type: string
        description: The total amount disbursed so far
        example: '800.00'
      total_amount:
        type: string
        description: The total amount to be disbursed
        example: '1000.00'
      average_amount:
        type: string
        description: The average amount per payment
        example: '100.00'

  DisbursementLite:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The unique identifier of the disbursement
        example: "c51ba1d5-52d3-412f-a59c-6ef32d59ab43"
      name:
        type: string
        description: The name of the disbursement
        example: "disbursement-june-29"
      status:
        $ref: '#/definitions/DisbursementStatus'
      created_at:
        type: string
        format: date-time
        description: The creation timestamp of the disbursement
        example: "2023-06-30T01:22:57.831975Z"
      updated_at:
        type: string
        format: date-time
        description: The last update timestamp of the disbursement
        example: "2023-06-30T01:22:58.316511Z"

  DisbursementPagination:
    type: "object"
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      data:
        type: "array"
        items:
          $ref: '#/definitions/Disbursement'
    example:
      pagination:
        next: "/disbursements?page=3&page_limit=1"
        prev: "/disbursements?page=1&page_limit=1"
        pages: 4
        total: 4
      data:
        id: "619da857-8725-4c58-933d-c120a458e0f5"
        name: "Disbursement Name"
        country:
          code: "UKR"
          name: "Ukraine"
          created_at: "2023-02-03T10:45:51.000Z"
          updated_at: "2023-02-03T10:45:51.000Z"
        wallet:
          id: "e2de8544-b7e2-40a9-ad40-411f70d5c4bf"
          name: "Vibrant"
          homepage: "https://vibrantapp.com"
        asset:
          id: "25923001-508a-4629-9186-c41211b2a3d0"
          code: "USDC"
          issuer: "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5"
        status: "READY"
        verification_field: "DATE_OF_BIRTH"
        status_history: [
          {
            "user_id": null,
            "status": "DRAFT",
            "timestamp": "2023-02-03T10:45:51.000Z"
          },
          {
            "user_id": "2ec7f1f9-add3-4e6d-9d14-bd8ac5e88872",
            "status": "READY",
            "timestamp": "2023-02-03T10:45:51.000Z"
          }
        ]
        file_name: "disbursement-february-03-2023.csv"
        created_at: "2023-02-03T10:45:51.000Z"
        updated_at: "2023-02-03T10:45:51.000Z"
        total_payments: 10
        total_payments_sent: 8
        total_payments_failed: 1
        total_payments_remaining: 1
        amount_disbursed: '800.00'
        total_amount: '1000.00'
        average_amount: '100.00'

  DisbursementReceiver:
    type: object
    properties:
      id:
        type: string
        example: 'ec3a57c0-5660-4b5a-af76-acadc7b09b93'
      email:
        type: string
        example: 'receiver@mail.org'
      phone_number:
        type: string
        example: '+15552368475'
      external_id:
        type: string
        example: 'usr129001'
      receiver_wallet:
        $ref: '#/definitions/ReceiverWallet'
      payment:
        $ref: '#/definitions/Payment'
      created_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'

  DisbursementReceiverPagination:
    type: "object"
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      data:
        type: "array"
        items:
          $ref: '#/definitions/DisbursementReceiver'


  DisbursementsStatistics:
    type: object
    properties:
      payment_counters:
        $ref: '#/definitions/PaymentCounters'
      payment_amounts_by_asset:
        type: array
        items:
          $ref: '#/definitions/PaymentAmountsByAsset'
      receiver_wallets_counters:
        $ref: '#/definitions/ReceiverWalletsCounters'
      total_receivers:
        type: integer
        description: Total number of receivers
        format: int64
        example: 100

  DisbursementStatus:
    type: string
    enum:
      - DRAFT
      - READY
      - STARTED
      - PAUSED
      - COMPLETED

  DisbursementStatusHistory:
    type: array
    items:
      $ref: '#/definitions/DisbursementStatusHistoryEntry'

  DisbursementStatusHistoryEntry:
    type: object
    properties:
      user_id:
        type: string
        example: '3f351b9e-ed0f-40fa-a314-14757b42dab1'
      status:
        $ref: '#/definitions/DisbursementStatus'
      timestamp:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'

  GeneralStatistics:
    type: object
    properties:
      total_disbursements:
        type: integer
        description: Total number of disbursements
        format: int64
        example: 20
      payment_counters:
        $ref: '#/definitions/PaymentCounters'
      payment_amounts_by_asset:
        type: array
        items:
          $ref: '#/definitions/PaymentAmountsByAsset'
      receiver_wallets_counters:
        $ref: '#/definitions/ReceiverWalletsCounters'
      total_receivers:
        type: integer
        description: Total number of receivers
        format: int64
        example: 1000

  MessageResponse:
    type: object
    properties:
      message:
        type: string
    required:
      - message

  Organization:
    type: object
    properties:
      name:
        type: string
        example: 'Stellar Aid'
      logo_url:
        type: string
        example: 'https://stellar-disbursement-platform-backend-dev.stellar.org/organization/logo'
      distribution_account_public_key:
        type: string
        example: 'GCXAJ3XJ3VK3JFH3QMDFOSKM2NMMZBSO3VIT6EUPQWSDW2J74M23RRSL'
      timezone_utc_offset:
        type: string
        example: '+00:00'
      is_approval_required:
        description: 'Enables multi-user approval workflow for disbursements'
        type: boolean
        example: true

  Pagination:
    type: "object"
    properties:
      next:
        type: "string"
        example: '?page=3&page_limit=2'
      prev:
        type: "string"
        example: '?page=1&page_limit=2'
      pages:
        type: "integer"
        example: 8
      total:
        type: "integer"
        example: 16

  Payment:
    type: object
    properties:
      id:
        type: string
        example: 'ddf22f55-3259-4822-a4e2-ce01334997f4'
      amount:
        type: string
        example: '100.00'
      stellar_transaction_id:
        type: string
        example: '0b339d1c89d314186b8147c2af4c9a9ed5bbdbcd7ada8d138633907649b'
      stellar_operation_id:
        type: string
      status:
        $ref: '#/definitions/PaymentStatus'
      status_history:
        $ref: '#/definitions/PaymentStatusHistory'
      disbursement:
        $ref: '#/definitions/DisbursementLite'
      asset:
        $ref: '#/definitions/Asset'
      receiver_wallet:
        $ref: '#/definitions/ReceiverWalletLite'
      created_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'

  PaymentPagination:
    type: "object"
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      data:
        type: "array"
        items:
          $ref: '#/definitions/Payment'
  PaymentStatus:
    type: string
    enum:
      - DRAFT
      - READY
      - PENDING
      - PAUSED
      - SUCCESS
      - FAILED

  PaymentStatusHistory:
    type: array
    items:
      $ref: '#/definitions/PaymentStatusHistoryEntry'

  PaymentStatusHistoryEntry:
    type: object
    properties:
      status:
        $ref: '#/definitions/PaymentStatus'
      status_message:
        type: string
      timestamp:
        type: string
        format: date-time
        example: '2023-02-03T10:45:51.000Z'

  PaymentCounters:
    type: object
    properties:
      draft:
        type: integer
        format: int64
        example: 1
      ready:
        type: integer
        format: int64
        example: 2
      pending:
        type: integer
        format: int64
        example: 3
      paused:
        type: integer
        format: int64
        example: 1
      success:
        type: integer
        format: int64
        example: 5
      failed:
        type: integer
        format: int64
        example: 1
      total:
        type: integer
        format: int64
        example: 14
  PaymentAmountsByAsset:
    type: object
    properties:
      asset_code:
        type: string
        example: 'USDC'
      payment_amounts:
        $ref: '#/definitions/PaymentAmounts'
  PaymentAmounts:
    type: object
    properties:
      draft:
        type: string
        example: '100.00'
      ready:
        type: string
        example: '200.00'
      pending:
        type: string
        example: '300.00'
      paused:
        type: string
        example: '100.00'
      success:
        type: string
        example: '500.00'
      failed:
        type: string
        example: '100.00'
      average:
        type: string
        example: '100.00'
      total:
        type: string
        example: '1400.00'

  Profile:
    type: object
    properties:
      first_name:
        type: string
        example: 'Jane'
      last_name:
        type: string
        example: 'Doe'
      email:
        type: string
        example: 'jdoe@mail.org'
      roles:
        type: array
        items:
          type: string
      organization_name:
        type: string
    example:
      first_name: Jane
      last_name: Doe
      email: jdoe@mail.org
      roles:
        - developer
      organization_name: Stellar Aid
  Receiver:
    type: "object"
    properties:
      id:
        type: "string"
        example: 'f83bb638-dda4-41e6-80c9-d03e6eec2aef'
      phone_number:
        type: "string"
        example: '+15552368475'
      external_id:
        type: "string"
        example: 'usr12334'
      email:
        type: "string"
        example: 'jdoe@mail.org'
      created_at:
        type: "string"
        example: '2023-02-03T10:45:51.000Z'
      total_payments:
        type: "string"
        example: "2"
      successful_payments:
        type: "string"
        example: "2"
      failed_payments:
        type: "string"
        example: "0"
      remaining_payments:
        type: "string"
        example: "0"
      registered_wallets:
        type: "string"
        example: 1
      received_amounts:
        type: "array"
        items:
          $ref: '#/definitions/Amount'
      wallets:
        type: "array"
        items:
          $ref: '#/definitions/ReceiverWallet'

  ReceiverLite:
    type: "object"
    properties:
      id:
        type: "string"
        example: '029e2ed0-feb6-4c40-8b47-0836a85741a2'

  ReceiverPagination:
    type: "object"
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      data:
        type: "array"
        items:
          $ref: '#/definitions/Receiver'

  ReceiverWallet:
    type: "object"
    properties:
      id:
        type: "string"
        example: '803031d4-1d04-4879-b6d9-dc5641f9988e'
      receiver:
        $ref: '#/definitions/ReceiverLite'
      wallet:
        $ref: '#/definitions/WalletLite'
      stellar_address:
        type: "string"
        example: 'GCXAJ3XJ3VK3JFH3QMDFOSKM2NMMZBSO3VIT6EUPQWSDW2J74M23RRSL'
      stellar_memo:
        type: "string"
      stellar_memo_type:
        type: "string"
      created_at:
        type: "string"
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: "string"
        example: '2023-02-03T10:45:51.000Z'
      invited_at:
        type: "string"
        example: '2023-02-09T10:45:51.000Z'
      last_sms_sent:
        type: "string"
        example: '2023-02-10T10:45:51.000Z'
        description: 'timestamp when the receiver last received an SMS about this wallet'
      total_payments:
        type: "string"
        example: "2"
      payments_received:
        type: "string"
        example: "2"
      failed_payments:
        type: "string"
        example: "0"
      remaining_payments:
        type: "string"
        example: "0"
      received_amounts:
        type: "array"
        items:
          $ref: '#/definitions/Amount'
      status:
        $ref: '#/definitions/ReceiversWalletStatus'
      status_history:
        type: "array"
        items:
          $ref: '#/definitions/ReceiversWalletStatusHistoryEntry'

  ReceiverWalletLite:
    type: "object"
    properties:
      id:
        type: "string"
        example: '803031d4-1d04-4879-b6d9-dc5641f9988e'
      receiver:
        $ref: '#/definitions/ReceiverLite'
      wallet:
        $ref: '#/definitions/WalletLite'
      stellar_address:
        type: "string"
        example: 'GCXAJ3XJ3VK3JFH3QMDFOSKM2NMMZBSO3VIT6EUPQWSDW2J74M23RRSL'
      created_at:
        type: "string"
        example: '2023-02-03T10:45:51.000Z'
      updated_at:
        type: "string"
        example: '2023-02-03T10:45:51.000Z'
      status:
        $ref: '#/definitions/ReceiversWalletStatus'

  ReceiverWalletsCounters:
    type: object
    properties:
      draft:
        type: integer
        format: int64
        example: 1
      ready:
        type: integer
        format: int64
        example: 1
      registered:
        type: integer
        format: int64
        example: 1
      flagged:
        type: integer
        format: int64
        example: 1
      total:
        type: integer
        format: int64
        example: 4

  ReceiversWalletStatus:
    type: "string"
    enum: [ "DRAFT", "READY", "REGISTERED", "FLAGGED" ]

  ReceiversWalletStatusHistoryEntry:
    type: "object"
    properties:
      status:
        $ref: '#/definitions/ReceiversWalletStatus'
      timestamp:
        type: "string"
        format: "date-time"
        example: '2023-02-10T10:45:51.000Z'

  Users:
    type: array
    items:
      $ref: '#/definitions/User'
  User:
    type: object
    properties:
      id:
        type: string
        example: '1736bed3-7b92-4760-8ff2-51fb08ee079f'
      first_name:
        type: string
        example: 'John'
      last_name:
        type: string
        example: 'Doe'
      email:
        type: string
      roles:
        type: array
        items:
          type: string
      is_active:
        type: boolean
    required:
      - id
      - first_name
      - last_name
      - email
      - roles
      - is_active
    example:
      - id: 7a4c6555-1f73-49b3-a211-f95bd2b8ec90
        first_name: John
        last_name: Doe
        email: email@email.com
        roles:
          - developer
        is_active: true
      - id: 5f4df1dd-c84f-482a-84ad-541ffd46e75a
        first_name: Jane
        last_name: Doe
        email: email@email.com
        roles:
          - financial_controller
        is_active: false
  VerificationField:
    type: string
    enum:
      - DATE_OF_BIRTH
      - PIN
      - NATIONAL_ID_NUMBER
  Wallet:
    type: object
    properties:
      id:
        type: string
        example: '5ada9ed5-455a-4782-a0ee-160767e0deb1'
      name:
        type: string
        example: 'Vibrant Assist'
      homepage:
        type: string
        example: 'https://vibrantapp.com'
      sep_10_client_domain:
        type: string
        example: 'api-dev.vibrantapp.com'
      deep_link_schema:
        type: string
        example: 'https://vibrantapp.com/sdp-dev'
      created_at:
        type: string
        format: date-time
        example: '2023-07-31T20:50:45.648Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-07-31T20:50:45.648Z'

  WalletLite:
    type: "object"
    properties:
      id:
        type: "string"
        example: '5ada9ed5-455a-4782-a0ee-160767e0deb1'
      name:
        type: "string"
        example: 'Vibrant Assist'
      homepage:
        type: "string"
        example: 'https://vibrantapp.com'

  ReceiverRegistrationRequest:
    type: object
    properties:
      phone_number:
        type: string
        description: Phone number used in registration
      otp:
        type: string
        description: One-Time Password received for verification
      verification:
        type: string
        description: Verification value provided by the user
      verification_type:
        type: string
        description: Type of verification value
        enum: [ DATE_OF_BIRTH, PIN, NATIONAL_ID_NUMBER ]
      recaptcha_token:
        type: string
        description: Token received from Google reCAPTCHA
  PatchReceiverRequest:
    type: object
    properties:
      date_of_birth:
        type: string
        description: Date of birth of the receiver
      pin:
        type: string
        description: Personal identification number of the receiver
      national_id:
        type: string
        description: National ID of the receiver
      email:
        type: string
        description: Email of the receiver
      external_id:
        type: string
        description: External ID of the receiver
    example:
      date_of_birth: "1980-01-01"
      pin: "1234"
      national_id: "123456789"
      email: "john@example.com"
      external_id: "external123"
responses:
  UnauthorizedResponse:
    description: Unauthorized
    headers: { }
    examples:
      application/json:
        error: Not authorized
        extras:
          status: 401
          message: Not authorized
    schema:
      type: object
      properties:
        error:
          type: string
        extras:
          type: object
          properties:
            status:
              type: number
            message:
              type: string
      example:
        error: Not authorized
        extras:
          status: 401
          message: Not authorized
  ForbiddenResponse:
    description: Forbidden
    headers: { }
    examples:
      application/json:
        error: Forbidden
    schema:
      type: object
      properties:
        error:
          type: string
      example:
        error: Forbidden
  BadRequestResponse:
    description: Bad Request
    schema:
      type: object
      properties:
        message:
          type: string
          description: Details about the error
  NotFoundResponse:
    description: Not Found
    headers: {}
    examples:
      application/json:
        error: Not found
        extras:
          status: 404
          message: Resource not found
    schema:
      type: object
      properties:
        error:
          type: string
        extras:
          type: object
          properties:
            status:
              type: number
            message:
              type: string
securityDefinitions:
  BearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT used for authentication, signed with an ES256 private key."
tags:
  - name: Authentication
    description: 'Authentication endpoints control the login, token refresh, and password management processes for SDP users.'
  - name: Disbursements
    description: 'Endpoints related to disbursements. A disbursement is a group of payments sent to multiple individuals at once. An SDP user with the appropriate role triggers a new disbursement through the SDP dashboard by uploading a list of receivers and amounts. When the receiver has linked their wallet to the SDP, the payment automatically begins. SDP users can track their disbursements in real-time through the SDP dashboard. Each disbursement must have a unique name defined by the organization.'
  - name: Payments
    description: 'Endpoints related to payments. An SDP payment is an individual payment from an organization to a receiver. Each payment is part of a disbursement and occurs on the Stellar network. Granular payment status is stored in the SDP database and can be viewed in real-time on the SDP dashboard. There is no POST endpoint because submitting payments to the Stellar network is handled by the Transaction Submission Service (TSS).'
  - name: Receivers
    description: >-
      Endpoints related to receivers. A receiver is an individual receiving a payment in a disbursement. The receiver is tracked by phone number to reduce the need for personally identifiable information. Each receiver must be unique within the disbursement.  
      
      
      Each receiver will have at least one wallet associated with them. The wallet public key will remain null until the receiver registers with a wallet provider and links the wallet to the SDP through SEP-24. Receivers must verify their identity through that process, which requires the SDP to store verification information on receivers like date of birth, national ID number, or personal PIN. This information can be updated by the organization through the receiver endpoints.

  - name: Statistics
    description: >-
      Statistics endpoints return general aggregated data per organization, as well as disbursement-specific metrics. SDP users can use this data to monitor their disbursements over time.

  - name: Registration
    description: >-
      The registration endpoints guide the process for a receiver to verify their identity and link their wallet address to an SDP.  
      
      
      The registration process only needs to happen once per receiver to link their wallet. Only SDP-compatible wallet providers can facilitate the registration process. These endpoints must be supported and hit by the wallet providers after the receiver gets the initial SMS invite. After the wallet address is successfully linked, the payment automatically begins.  
      
      
      The SDP<>wallet registration process uses SEP-10, SEP-24, and deep links. Please see the SDP [developer docs](https://developers.stellar.org/docs/category/use-the-stellar-disbursement-platform) for a full set of instructions for wallet providers to become SDP-compatible.
  - name: Profile
    description: >-
      Profiles endpoints manage the process of getting and updating individual profile information. Profile information is set when the account is created and can be updated by the user on the SDP dashboard Profile page. Note: profiles never refer to receivers of funds.

  - name: Organization
    description: >-
      Organization endpoints manage the process of getting and updating organizational profile information. The organization’s profile has basic information set at the time of SDP deployment. It can be modified by the Owner. Organizations can also manage their preferences, like which assets to use, through these endpoints.

  - name: Users
    description: >-
      The users endpoints facilitate the creation of new SDP users–including setting the appropriate role, sending an email invitation, and activating a user–and managing roles.
